name: assignment3
on:
  push
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Build and export
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ./Dockerfile
        tags: mealssvr-v2:latest
        outputs: type=docker,dest=/tmp/image.tar
    - name: Create log file
      if: always()  # always perform this step even if build fails
      run: |
        echo $(date -Iminutes) > log.txt
        echo "Yovel Kalmanson" >> log.txt
        if [ ${{ job.status }} == "success" ]; then
          echo "image successfully built" >> log.txt
        else
          echo "image not able to be built" >> log.txt
        fi
    - name: upload log file
      if: always()  # always perform this step even if build fails
      uses: actions/upload-artifact@v3
      with:
        name: log
        path: log.txt
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: mealssvr
        path: /tmp/image.tar

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
#    1. download image and run it in a container
    - name: Download artifact
      uses: actions/download-artifact@v3  # downloads all artifacts
    - name: Load Docker images from previous workflows
      run: docker load --input mealssvr/image.tar
    - name: check mealssvr image is loaded
      run: docker image ls
    - name: run image in container
      run: docker run -p8000:8000 mealssvr-v2 &
    - name: Check container is running
      run: | 
        docker ps
        echo "CONTAINER_SUM=$(docker ps -q | wc -l)" >> $GITHUB_ENV
#     2. set up python and pytest environment
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest # not using yet lint checker like ruff
        pip install requests
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#      3. run pytest tests and check results
    - name: Test with pytest  # additionally use ruff or other lint checkers
      run: |
        cd tests
        pytest -v assn3_tests.py > assn3_test_results.txt
        echo "PYTEST_CODE=$(echo $?)" >> $GITHUB_ENV
    - name: upload test results
      if: always()  # always perform this step even if tests fail, to see results
      uses: actions/upload-artifact@v3
      with:
        name: test_results
        path: tests/assn3_test_results.txt
    - name: Update log file- tests
      if: always()  # always perform this step even if container run fail, to see results
      run: |
        echo $(date -Iminutes) > log.txt
        echo "Yovel Kalmanson" >> log.txt
        echo "image successfully built" >> log.txt
        python log_handler.py ${{ env.CONTAINER_SUM }} ${{ env.PYTEST_CODE }} >> log.txt
    - name: upload log file
      if: always()  # always perform this step even if container run fail, to see results
      uses: actions/upload-artifact@v3
      with:
        name: log
        path: log.txt

  query:
    needs: test
    runs-on: ubuntu-latest
    steps:
      #    1. download image and run it in a container
      - name: Download artifact
        uses: actions/download-artifact@v3  # downloads all artifacts
      - name: Load Docker images from previous workflows
        run: docker load --input mealssvr/image.tar
      - name: check mealssvr image is loaded
        run: docker image ls
      - name: run image in container
        run: docker run -p8000:8000 mealssvr-v2 &
      - name: Check container is running
        run: docker ps
      #     2. set up python and pytest environment
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest # not using yet lint checker like ruff
          pip install requests
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: create directory
        run: |
          mkdir -p mypath
      - name: queries
        run: |
          python query_handler.py >> mypath/response.txt
      - name: upload query results
        if: always()  # always perform this step even if fails, to see results
        uses: actions/upload-artifact@v3
        with:
          name: query_results
          path: mypath/response.txt